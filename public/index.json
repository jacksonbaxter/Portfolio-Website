[{"authors":null,"categories":["Projects"],"content":"This is a repo of all the projects I completed during my CS 474 Deep Learning class. Topics include: PyTorch Unets Convolutional Neural Networks Diffusion Modeling Transfer Learning Reinforcement Learning Generalization Self-attention and more…\nGithub Link https://github.com/jacksonbaxter/CS474\n","date":1737417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1737417600,"objectID":"cc27506cdb1883d8069fcc5163e459fe","permalink":"https://jacksonbaxter.xyz/post/cs474-projects/","publishdate":"2025-01-21T00:00:00Z","relpermalink":"/post/cs474-projects/","section":"post","summary":"This is a repo of all the projects I completed during my CS 474 Deep Learning class. Topics include: PyTorch Unets Convolutional Neural Networks Diffusion Modeling Transfer Learning Reinforcement Learning Generalization Self-attention and more…\nGithub Link https://github.com/jacksonbaxter/CS474","tags":["AI","Python","Deep Learning","PyTorch","Jupyter Notebook\""],"title":"CS 474 Deep Learning Projects","type":"post"},{"authors":null,"categories":["Projects"],"content":"This is a repo of all the projects I completed during my CS 270 Machine Learning class. Topics include: Backpropogation Clustering Decision Tree Nearest Neighbor Perceptron\nGithub Link https://github.com/jacksonbaxter/CS270\n","date":1737072e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1737072e3,"objectID":"1583993c71d1156e5310414830122c95","permalink":"https://jacksonbaxter.xyz/post/cs270-projects/","publishdate":"2025-01-17T00:00:00Z","relpermalink":"/post/cs270-projects/","section":"post","summary":"This is a repo of all the projects I completed during my CS 270 Machine Learning class. Topics include: Backpropogation Clustering Decision Tree Nearest Neighbor Perceptron\nGithub Link https://github.com/jacksonbaxter/CS270","tags":["AI","Python","Machine Learning"],"title":"CS 270 Machine Learning Projects","type":"post"},{"authors":null,"categories":["Projects"],"content":"Utah Apartments CS 270 Final Project These are the results of my final project and presentation to predict Utah County apartment prices based on a number of practices. The data collection and models can be found in the Jupyter Notebook and the final report can be found in the pdf.\nGithub Link https://github.com/jacksonbaxter/Utah-Apartments-CS270\n","date":1736985600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1736985600,"objectID":"d2b19480bb973ad5f1c0546ff284cc94","permalink":"https://jacksonbaxter.xyz/post/utah-apartments/","publishdate":"2025-01-16T00:00:00Z","relpermalink":"/post/utah-apartments/","section":"post","summary":"Utah Apartments CS 270 Final Project These are the results of my final project and presentation to predict Utah County apartment prices based on a number of practices. The data collection and models can be found in the Jupyter Notebook and the final report can be found in the pdf.\nGithub Link https://github.com/jacksonbaxter/Utah-Apartments-CS270","tags":["Jupyter Notebook","AI","Python","Machine Learning"],"title":"Utah Apartment Price Prediction Project","type":"post"},{"authors":null,"categories":["Projects"],"content":"Here is the source code and post for my LLM to SQL group project for a Database class.\nhttps://github.com/pined1/LLM_SQL\nNatural Language SQL Project Purpose of the Database My database models vendor and product data for a marketplace application, which includes vendors, their products, customer ratings, and orders.\nSchema Query I thought it did well on Question: Which vendors have the highest rating?\nGPT SQL Response:\nSELECT Vendors.VendorID, Vendors.VendorName, MAX(Ratings.RatingValue) as MaxRating FROM Vendors INNER JOIN Ratings ON Vendors.VendorID = Ratings.VendorID GROUP BY Vendors.VendorID, Vendors.VendorName ORDER BY MaxRating DESC; Friendly Response: The vendors with the highest rating are Panadería El Salvador, El Rincón del Café, and Pura Vida Tienda, all with a perfect score of 5.0. Following them are Mercado Flores and McDonald’s, both with a rating of 4.0.\nQuestion that it tripped up on Question: Which vendors sell products priced over $20?\nGPT SQL Response:\nSELECT Vendors.VendorName FROM Vendors JOIN Products ON Vendors.VendorID = Products.VendorID WHERE Products.ProductPrice \u0026gt; 20; SQL Result: []\nFriendly Response: Unfortunately, there are currently no vendors selling products priced over $20.\nWhile the SQL was correct, the response was empty because no data matched the query. GPT correctly identified the issue but gave a generic response.\nMulti-shot Query Example Question: What products are sold in Antigua Guatemala?\nGPT SQL Response:\nSELECT ProductName FROM Products WHERE VendorID IN (SELECT VendorID FROM Vendors WHERE VendorLocation = \u0026#39;Antigua Guatemala\u0026#39;); SQL Result: [(‘Espresso’,), (‘Café Latte’,)]\nFriendly Response: In Antigua Guatemala, you can find products such as Espresso and Café Latte.\n6 Additional Examples with Prompt Strategies 1. Strategy: Zero-shot Question: Which vendors are located in Guatemala City?\nSQL Response:\nSELECT VendorName FROM Vendors WHERE VendorLocation = \u0026#39;Guatemala City\u0026#39;; SQL Result: [(‘Panadería El Salvador’,), (‘McDonalds’,)]\nFriendly Response: The vendors located in Guatemala City are Panadería El Salvador and McDonalds.\n2. Strategy: Single-domain multi-shot Question: Which customers gave a 5-star rating?\nSQL Response:\nSELECT CustomerName FROM Ratings WHERE RatingValue = 5; SQL Result: [(‘Jane Smith’,), (‘Maria López’,), (‘Ana Pérez’,)]\nFriendly Response: The customers who gave a 5-star rating are Jane Smith, Maria López, and Ana Pérez.\n3. Strategy: Zero-shot Question: What products are sold by vendors in Antigua Guatemala?\nSQL Response:\nSELECT Products.ProductName FROM Products INNER JOIN Vendors ON Products.VendorID = Vendors.VendorID WHERE Vendors.VendorLocation = \u0026#39;Antigua Guatemala\u0026#39;; SQL Result: [(‘Espresso’,), (‘Café Latte’,)]\nFriendly Response: Products sold in Antigua Guatemala include Espresso and Café Latte.\n4. Strategy: Double-shot Question: Which vendors have products priced above $20?\nSQL Response:\nSELECT Vendors.VendorName FROM Vendors JOIN Products ON Vendors.VendorID = Products.VendorID WHERE Products.ProductPrice \u0026gt; 20; SQL Result: []\nFriendly Response: Currently, no vendors have products priced above $20.\n5. Strategy: Single-shot Question: What is the most expensive product sold by vendors?\nSQL Response:\nSELECT ProductName, MAX(ProductPrice) FROM Products; SQL Result: [(‘Deluxe Coffee’, 25.0)]\nFriendly Response: The most expensive product sold by vendors is Deluxe Coffee, priced at $25.00.\n6. Strategy: Multi-shot Question: List all vendors and their products.\nSQL Response:\nSELECT Vendors.VendorName, Products.ProductName FROM Vendors INNER JOIN Products ON Vendors.VendorID = Products.VendorID; SQL Result: [(‘Panadería El Salvador’, ‘Bread’), (‘McDonalds’, ‘Big Mac’)]\nFriendly Response: Vendors and their products include Panadería El Salvador selling Bread, and McDonalds selling Big Mac.\nConclusion My findings show that for queries with well-structured joins, GPT-4 does well in generating SQL queries and interpreting the results. However, for cases where no data is returned, GPT tends to give generic responses. This could be improved with better prompting strategies.\n","date":1736208e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1736208e3,"objectID":"d1dc932920d62c75f1021d58a376ac54","permalink":"https://jacksonbaxter.xyz/post/llm-sql-post/","publishdate":"2025-01-07T00:00:00Z","relpermalink":"/post/llm-sql-post/","section":"post","summary":"Here is the source code and post for my LLM to SQL group project for a Database class.\nhttps://github.com/pined1/LLM_SQL\nNatural Language SQL Project Purpose of the Database My database models vendor and product data for a marketplace application, which includes vendors, their products, customer ratings, and orders.\nSchema Query I thought it did well on Question: Which vendors have the highest rating?\nGPT SQL Response:\nSELECT Vendors.VendorID, Vendors.VendorName, MAX(Ratings.RatingValue) as MaxRating FROM Vendors INNER JOIN Ratings ON Vendors.","tags":["SQL","Database","AI"],"title":"LLM to SQL Group Project","type":"post"},{"authors":null,"categories":["Projects"],"content":"For my final project for my database modeling class at BYU I decided to combine my desire to learn more Rust and fulfill the following requirements at the same time:\nFeatures Caching layer non-persistent (e.g. Redis) and persistent layer (e.g. Postgres SQL). (See https://redis.com/wp-content/uploads/2023/04/redis-enterprise-for-caching.pdf) In-memory cache (fastest, but volatile) Redis cache (medium speed, distributed) PostgreSQL database (persistent storage) Support 5000 read requests per second with subsecond average latency on each request. Support 5000 write requests per second with subsecond average latency on each request. High Concurrency It was a great challenge but also one of the most fun projects I had all of last semester due to the amount of learning I was able to do all with one project.\nBelow is the post I put into the class Discord to explain my project that has the relevant information. Thanks for reading!\nHigh Performance Caching Final Project by Jackson Baxter My project is designed to enable a highly performant, layered, and scalable caching system. I built it in Rust so that I can safely use a very minimal amount of resources or large amount at scale. This is acheived through also using in-memory caching first, then Redis non-persistent storage, then PostgreSQL. Lastly, it is very easy to deploy thanks to Docker.\nGithub Link https://github.com/jacksonbaxter/high-performace-cache\nKey learnings Low-level and efficient languages like Rust enable high scalability and low resource use even for big databases. Docker made tying multiple systems like Redis and PostgreSQL much easier. Using the already useful connective frameworks for Redis within Rust made layering and concurrency much easier and much more stable. Failover Strategy Everything is save in persistent storage through PostgreSQL through consistent health checks.\nCharacteristics Caching layer non-persistent (e.g. Redis) and persistent layer (e.g. Postgres SQL). (See https://redis.com/wp-content/uploads/2023/04/redis-enterprise-for-caching.pdf) In-memory cache (fastest, but volatile) Redis cache (medium speed, distributed) PostgreSQL database (persistent storage) Support 5000 read requests per second with subsecond average latency on each request. Support 5000 write requests per second with subsecond average latency on each request. High Concurrency Video https://youtu.be/PhfE7N2PJmk\nFeel free to provide any feedback or questions!\n","date":1735689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1735689600,"objectID":"d4027a36e39b715315189796f01e4839","permalink":"https://jacksonbaxter.xyz/post/high-performance-cache-post/","publishdate":"2025-01-01T00:00:00Z","relpermalink":"/post/high-performance-cache-post/","section":"post","summary":"For my final project for my database modeling class at BYU I decided to combine my desire to learn more Rust and fulfill the following requirements at the same time:\nFeatures Caching layer non-persistent (e.g. Redis) and persistent layer (e.g. Postgres SQL). (See https://redis.com/wp-content/uploads/2023/04/redis-enterprise-for-caching.pdf) In-memory cache (fastest, but volatile) Redis cache (medium speed, distributed) PostgreSQL database (persistent storage) Support 5000 read requests per second with subsecond average latency on each request.","tags":["Rust","Database"],"title":"High Performance Cache in Rust Project","type":"post"},{"authors":null,"categories":null,"content":"I’m Jackson Baxter, a software developer based in Provo, Utah.\n","date":1734825600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1734825600,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://jacksonbaxter.xyz/about/","publishdate":"2024-12-22T00:00:00Z","relpermalink":"/about/","section":"","summary":"I’m Jackson Baxter, a software developer based in Provo, Utah.","tags":null,"title":"About","type":"page"},{"authors":null,"categories":null,"content":"This is my first post.\n","date":1734825600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1734825600,"objectID":"2891ef7ac669613ed704a6ee4440ca95","permalink":"https://jacksonbaxter.xyz/post/first-post/","publishdate":"2024-12-22T00:00:00Z","relpermalink":"/post/first-post/","section":"post","summary":"This is my first post.","tags":null,"title":"First Post","type":"post"}]