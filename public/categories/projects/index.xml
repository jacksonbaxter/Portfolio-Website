<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Jackson Baxter</title><link>https://jacksonbaxter.xyz/categories/projects/</link><description>Recent content in Projects on Jackson Baxter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jacksonbaxter.xyz/categories/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>High Performance Cache in Rust Project</title><link>https://jacksonbaxter.xyz/post/high-performance-cache-post/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate><guid>https://jacksonbaxter.xyz/post/high-performance-cache-post/</guid><description>For my final project for my database modeling class at BYU I decided to combine my desire to learn more Rust and fulfill the following requirements at the same time:
Features Caching layer non-persistent (e.g. Redis) and persistent layer (e.g. Postgres SQL). (See https://redis.com/wp-content/uploads/2023/04/redis-enterprise-for-caching.pdf) In-memory cache (fastest, but volatile) Redis cache (medium speed, distributed) PostgreSQL database (persistent storage) Support 5000 read requests per second with subsecond average latency on each request.</description></item></channel></rss>